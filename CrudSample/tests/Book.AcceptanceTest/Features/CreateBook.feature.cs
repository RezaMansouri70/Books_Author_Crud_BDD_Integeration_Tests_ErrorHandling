// ------------------------------------------------------------------------------
//  <auto-generated>
//      This code was generated by SpecFlow (https://www.specflow.org/).
//      SpecFlow Version:3.9.0.0
//      SpecFlow Generator Version:3.9.0.0
// 
//      Changes to this file may cause incorrect behavior and will be lost if
//      the code is regenerated.
//  </auto-generated>
// ------------------------------------------------------------------------------
#region Designer generated code
#pragma warning disable
namespace Book.AcceptanceTest.Features
{
    using TechTalk.SpecFlow;
    using System;
    using System.Linq;
    
    
    [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
    [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
    public partial class CreateBookFeature : object, Xunit.IClassFixture<CreateBookFeature.FixtureData>, System.IDisposable
    {
        
        private static TechTalk.SpecFlow.ITestRunner testRunner;
        
        private string[] _featureTags = ((string[])(null));
        
        private Xunit.Abstractions.ITestOutputHelper _testOutputHelper;
        
#line 1 "CreateBook.feature"
#line hidden
        
        public CreateBookFeature(CreateBookFeature.FixtureData fixtureData, Book_AcceptanceTest_XUnitAssemblyFixture assemblyFixture, Xunit.Abstractions.ITestOutputHelper testOutputHelper)
        {
            this._testOutputHelper = testOutputHelper;
            this.TestInitialize();
        }
        
        public static void FeatureSetup()
        {
            testRunner = TechTalk.SpecFlow.TestRunnerManager.GetTestRunner();
            TechTalk.SpecFlow.FeatureInfo featureInfo = new TechTalk.SpecFlow.FeatureInfo(new System.Globalization.CultureInfo("en-US"), "Features", "CreateBook", "\tBook and author registration informations", ProgrammingLanguage.CSharp, ((string[])(null)));
            testRunner.OnFeatureStart(featureInfo);
        }
        
        public static void FeatureTearDown()
        {
            testRunner.OnFeatureEnd();
            testRunner = null;
        }
        
        public virtual void TestInitialize()
        {
        }
        
        public virtual void TestTearDown()
        {
            testRunner.OnScenarioEnd();
        }
        
        public virtual void ScenarioInitialize(TechTalk.SpecFlow.ScenarioInfo scenarioInfo)
        {
            testRunner.OnScenarioInitialize(scenarioInfo);
            testRunner.ScenarioContext.ScenarioContainer.RegisterInstanceAs<Xunit.Abstractions.ITestOutputHelper>(_testOutputHelper);
        }
        
        public virtual void ScenarioStart()
        {
            testRunner.OnScenarioStart();
        }
        
        public virtual void ScenarioCleanup()
        {
            testRunner.CollectScenarioErrors();
        }
        
        public virtual void FeatureBackground()
        {
#line 4
#line hidden
            TechTalk.SpecFlow.Table table1 = new TechTalk.SpecFlow.Table(new string[] {
                        "Code",
                        "Description"});
            table1.AddRow(new string[] {
                        "101",
                        "Invalid Book Name"});
            table1.AddRow(new string[] {
                        "102",
                        "Invalid Author Name"});
            table1.AddRow(new string[] {
                        "201",
                        "Duplicate Book by Title"});
            table1.AddRow(new string[] {
                        "202",
                        "Duplicate Author by Name"});
#line 5
 testRunner.Given("system error codes are following", ((string)(null)), table1, "Given ");
#line hidden
        }
        
        void System.IDisposable.Dispose()
        {
            this.TestTearDown();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Create Book and author, Read books")]
        [Xunit.TraitAttribute("FeatureTitle", "CreateBook")]
        [Xunit.TraitAttribute("Description", "Create Book and author, Read books")]
        public virtual void CreateBookAndAuthorReadBooks()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Create Book and author, Read books", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 13
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table2 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "FullName"});
                table2.AddRow(new string[] {
                            "1",
                            "Robert C. Martin"});
#line 14
 testRunner.When("user create a new author with below data", ((string)(null)), table2, "When ");
#line hidden
                TechTalk.SpecFlow.Table table3 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title",
                            "Description",
                            "Price",
                            "AuthorId"});
                table3.AddRow(new string[] {
                            "Clean Code: A Handbook of Agile Software Craftsmanship",
                            "Noted software expert Robert C. Martin, presents a revolutionary paradigm with Cl" +
                                "ean Code: A Handbook of Agile Software Craftsmanship.",
                            "35.25",
                            "1"});
#line 17
 testRunner.And("user Create a new Book with below data", ((string)(null)), table3, "And ");
#line hidden
#line 20
 testRunner.Then("user get all list of all books, and filter name of \"Clean Code: A Handbook of Agi" +
                        "le Software Craftsmanship\" there must be \"1\" result", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table4 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "FullName"});
                table4.AddRow(new string[] {
                            "2",
                            "Robert C. Martin"});
#line 21
 testRunner.When("user create a new author with below data", ((string)(null)), table4, "When ");
#line hidden
#line 24
 testRunner.Then("system responds with \"202\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
                TechTalk.SpecFlow.Table table5 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title",
                            "Description",
                            "Price",
                            "AuthorId"});
                table5.AddRow(new string[] {
                            "Clean Code: A Handbook of Agile Software Craftsmanship",
                            "Noted software expert Robert C. Martin, presents a revolutionary paradigm with Cl" +
                                "ean Code: A Handbook of Agile Software Craftsmanship.",
                            "35.25",
                            "1"});
#line 25
 testRunner.When("user Create a new Book with below data", ((string)(null)), table5, "When ");
#line hidden
#line 28
 testRunner.Then("system responds with \"201\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Validate author with fullName")]
        [Xunit.TraitAttribute("FeatureTitle", "CreateBook")]
        [Xunit.TraitAttribute("Description", "Validate author with fullName")]
        public virtual void ValidateAuthorWithFullName()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate author with fullName", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 31
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table6 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "FullName"});
                table6.AddRow(new string[] {
                            "1",
                            "C"});
#line 32
 testRunner.When("user create a new author with below data", ((string)(null)), table6, "When ");
#line hidden
#line 35
 testRunner.Then("system responds with \"102\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [Xunit.SkippableFactAttribute(DisplayName="Validate book with Title")]
        [Xunit.TraitAttribute("FeatureTitle", "CreateBook")]
        [Xunit.TraitAttribute("Description", "Validate book with Title")]
        public virtual void ValidateBookWithTitle()
        {
            string[] tagsOfScenario = ((string[])(null));
            System.Collections.Specialized.OrderedDictionary argumentsOfScenario = new System.Collections.Specialized.OrderedDictionary();
            TechTalk.SpecFlow.ScenarioInfo scenarioInfo = new TechTalk.SpecFlow.ScenarioInfo("Validate book with Title", null, tagsOfScenario, argumentsOfScenario, this._featureTags);
#line 37
this.ScenarioInitialize(scenarioInfo);
#line hidden
            bool isScenarioIgnored = default(bool);
            bool isFeatureIgnored = default(bool);
            if ((tagsOfScenario != null))
            {
                isScenarioIgnored = tagsOfScenario.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((this._featureTags != null))
            {
                isFeatureIgnored = this._featureTags.Where(__entry => __entry != null).Where(__entry => String.Equals(__entry, "ignore", StringComparison.CurrentCultureIgnoreCase)).Any();
            }
            if ((isScenarioIgnored || isFeatureIgnored))
            {
                testRunner.SkipScenario();
            }
            else
            {
                this.ScenarioStart();
#line 4
this.FeatureBackground();
#line hidden
                TechTalk.SpecFlow.Table table7 = new TechTalk.SpecFlow.Table(new string[] {
                            "Id",
                            "FullName"});
                table7.AddRow(new string[] {
                            "1",
                            "Robert C. Martin"});
#line 38
 testRunner.When("user create a new author with below data", ((string)(null)), table7, "When ");
#line hidden
                TechTalk.SpecFlow.Table table8 = new TechTalk.SpecFlow.Table(new string[] {
                            "Title",
                            "Description",
                            "Price",
                            "AuthorId"});
                table8.AddRow(new string[] {
                            "B",
                            "A Handbook of Agile Software Craftsmanship.",
                            "35.25",
                            "1"});
#line 41
 testRunner.And("user Create a new Book with below data", ((string)(null)), table8, "And ");
#line hidden
#line 44
 testRunner.Then("system responds with \"101\" error", ((string)(null)), ((TechTalk.SpecFlow.Table)(null)), "Then ");
#line hidden
            }
            this.ScenarioCleanup();
        }
        
        [System.CodeDom.Compiler.GeneratedCodeAttribute("TechTalk.SpecFlow", "3.9.0.0")]
        [System.Runtime.CompilerServices.CompilerGeneratedAttribute()]
        public class FixtureData : System.IDisposable
        {
            
            public FixtureData()
            {
                CreateBookFeature.FeatureSetup();
            }
            
            void System.IDisposable.Dispose()
            {
                CreateBookFeature.FeatureTearDown();
            }
        }
    }
}
#pragma warning restore
#endregion
